
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: testdb
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false # Ensure credentials are not persisted to avoid conflicts

    - name: Set up git configuration
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global --unset-all http.https://github.com/.extraheader || true
        git submodule foreach --recursive 'git config --local --unset-all http.https://github.com/.extraheader || true' || true
        git submodule foreach --recursive 'git config --local --unset-all core.sshCommand || true' || true

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Improved retry mechanism with more attempts and better error handling
        for i in 1 2 3 4 5; do
          echo "Attempt $i to install dependencies..."
          # Try to install with pip's built-in retry
          pip install -r requirements.txt --verbose --retries 3 && break || {
            echo "Attempt $i failed! Waiting 45 seconds before retrying..."
            sleep 45
            # If we're on the last attempt, try installing packages one by one
            if [ $i -eq 5 ]; then
              echo "Trying to install packages one by one..."
              cat requirements.txt | grep -v "#" | xargs -n 1 pip install || true
            fi
          }
        done
        # Verify installations
        pip freeze

    - name: Run Python tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: testdb
        DB_USER: postgres
        DB_PASSWORD: testpassword
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PYTHONPATH: .
      run: |
        pytest tests/

    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Run Frontend tests
      run: |
        cd frontend
        npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false # Ensure credentials are not persisted to avoid conflicts

    - name: Set up git configuration
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global --unset-all http.https://github.com/.extraheader || true

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Backend
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/advanced-ai-chatbot-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/advanced-ai-chatbot-backend:${{ github.sha }}

    - name: Build and push Frontend
      uses: docker/build-push-action@v3
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/advanced-ai-chatbot-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/advanced-ai-chatbot-frontend:${{ github.sha }}

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false # Ensure credentials are not persisted to avoid conflicts

    - name: Set up git configuration
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global --unset-all http.https://github.com/.extraheader || true
        git submodule foreach --recursive 'git config --local --unset-all http.https://github.com/.extraheader || true' || true
        git submodule foreach --recursive 'git config --local --unset-all core.sshCommand || true' || true

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Run linters
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install flake8 black
        flake8 .
        black --check .

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false # Ensure credentials are not persisted to avoid conflicts

    - name: Set up git configuration
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global --unset-all http.https://github.com/.extraheader || true

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Run Bandit security scan
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        bandit -r . -f custom
